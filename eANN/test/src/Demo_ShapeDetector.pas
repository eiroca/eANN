(* GPL > 3.0
Copyright (C) 1996-2014 eIrOcA Enrico Croce & Simona Burzio

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)
(*
@author Enrico Croce
*)
unit Demo_ShapeDetector;
{$M+}
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Classes, SysUtils,
  uEANNTestCase,
  eDataPick, eLibMath, eLibStat,
  eANNCore, eANNMLP;

type
  ShapeDetector = class(ANNTestCase)
  private
    procedure WriteShape(NW1, NW2: TANN);
  published
    procedure ShapeDetector;
  end;

implementation

procedure ShapeDetector.WriteShape(NW1, NW2: TANN);
var
  i, j: integer;
  ip, p1, p2: TData;
  tmp: string;
begin
  SetLength(p1, NW1.DimOut);
  SetLength(p2, NW2.DimOut);
  for i:= 0 to NW1.DataIn.Count-1 do begin
    ip:= NW1.DataIn[i];
    NW1.Simul(ip, p1);
    NW2.Simul(ip, p2);
    WriteMessage('('+IntToStr(findPosMax(p1)+1)+','+IntToStr(findPosMax(p2)+1)+')');
    tmp:= '';
    for j := 0 to 24 do begin
      if ((j>0) and ((j mod 5) = 0)) then begin
//        WriteMessage(tmp);
        tmp:='';
      end;
      if (ip[j]>0.001) then tmp:= tmp+'*'
      else tmp:= tmp+'.';
    end;
//    WriteMessage(tmp);
  end;
end;

procedure ShapeDetector.ShapeDetector;
const
  NTW: array[1..3] of TLayerDesc =
    (
    (Neu: 25; Kind: TNeuron),
    (Neu: 18; Kind: TLogisticNeuron),
    (Neu:  9; Kind: TLogisticNeuron)
    );
var
  NW_what, NW_where: TMLPNetwork;
  pShape, pWhat, pWhere: TDataList;
begin
  pShape:= TDataPattern.Create(nil);
  pShape.LoadFromFile('data/NN-SHAPE.DAT');
  pWhat:= TDataPattern.Create(nil);
  pWhat.LoadFromFile('data/NN-WHAT.DAT');
  pWhere:= TDataPattern.Create(nil);
  pWhere.LoadFromFile('data/NN-WHERE.DAT');
  NW_what:= TMLPNetwork.BuildNetwork(NTW, pShape, pWhat,  0.10, 0, 0, false, 300);
  NW_where:= TMLPNetwork.BuildNetwork(NTW, pShape, pWhere, 0.20, 0, 0.1, false, 200);
  try
    NW_What.Train;
  except
    on EANNWarning do ;
  end;
  try
    NW_Where.Train;
  except
    on EANNWarning do ;
  end;

  WriteMessage('');
  WriteMessage('Testing '+pShape.Desc);
  WriteNetworkMLP(NW_What);
  WriteNetworkMLP(NW_Where);
  WriteShape(NW_What, NW_where);

  WriteMessage('');
  NW_What.Free;
  NW_Where.Free;
  pShape.Free;
  pWhat.Free;
  pWhere.Free;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(ShapeDetector.Suite);
end.


